// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetImagesParams creates a new GetImagesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetImagesParams() *GetImagesParams {
	return &GetImagesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetImagesParamsWithTimeout creates a new GetImagesParams object
// with the ability to set a timeout on a request.
func NewGetImagesParamsWithTimeout(timeout time.Duration) *GetImagesParams {
	return &GetImagesParams{
		timeout: timeout,
	}
}

// NewGetImagesParamsWithContext creates a new GetImagesParams object
// with the ability to set a context for a request.
func NewGetImagesParamsWithContext(ctx context.Context) *GetImagesParams {
	return &GetImagesParams{
		Context: ctx,
	}
}

// NewGetImagesParamsWithHTTPClient creates a new GetImagesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetImagesParamsWithHTTPClient(client *http.Client) *GetImagesParams {
	return &GetImagesParams{
		HTTPClient: client,
	}
}

/*
GetImagesParams contains all the parameters to send to the API endpoint

	for the get images operation.

	Typically these are written to a http.Request.
*/
type GetImagesParams struct {

	/* Limit.

	   The number of results to be returned per page.

	   Format: int64
	   Default: 100
	*/
	Limit *int64

	/* ModelID.

	   The ID of a model to get images from (model gallery).

	   Format: int64
	*/
	ModelID *int64

	/* ModelVersionID.

	   The ID of a model version to get images from (model gallery filtered to version).

	   Format: int64
	*/
	ModelVersionID *int64

	/* Nsfw.

	   Filter to images that contain mature content flags or not (undefined returns both).
	*/
	Nsfw *bool

	/* Page.

	   The page from which to start fetching creators.

	   Format: int64
	*/
	Page *int64

	/* Period.

	   The time frame in which the images will be sorted.
	*/
	Period *string

	/* PostID.

	   The ID of a post to get images from.

	   Format: int64
	*/
	PostID *int64

	/* Sort.

	   The order in which you wish to sort the results.
	*/
	Sort *string

	/* Username.

	   Filter to images from a specific user.
	*/
	Username *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get images params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetImagesParams) WithDefaults() *GetImagesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get images params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetImagesParams) SetDefaults() {
	var (
		limitDefault = int64(100)
	)

	val := GetImagesParams{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get images params
func (o *GetImagesParams) WithTimeout(timeout time.Duration) *GetImagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get images params
func (o *GetImagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get images params
func (o *GetImagesParams) WithContext(ctx context.Context) *GetImagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get images params
func (o *GetImagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get images params
func (o *GetImagesParams) WithHTTPClient(client *http.Client) *GetImagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get images params
func (o *GetImagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the get images params
func (o *GetImagesParams) WithLimit(limit *int64) *GetImagesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get images params
func (o *GetImagesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithModelID adds the modelID to the get images params
func (o *GetImagesParams) WithModelID(modelID *int64) *GetImagesParams {
	o.SetModelID(modelID)
	return o
}

// SetModelID adds the modelId to the get images params
func (o *GetImagesParams) SetModelID(modelID *int64) {
	o.ModelID = modelID
}

// WithModelVersionID adds the modelVersionID to the get images params
func (o *GetImagesParams) WithModelVersionID(modelVersionID *int64) *GetImagesParams {
	o.SetModelVersionID(modelVersionID)
	return o
}

// SetModelVersionID adds the modelVersionId to the get images params
func (o *GetImagesParams) SetModelVersionID(modelVersionID *int64) {
	o.ModelVersionID = modelVersionID
}

// WithNsfw adds the nsfw to the get images params
func (o *GetImagesParams) WithNsfw(nsfw *bool) *GetImagesParams {
	o.SetNsfw(nsfw)
	return o
}

// SetNsfw adds the nsfw to the get images params
func (o *GetImagesParams) SetNsfw(nsfw *bool) {
	o.Nsfw = nsfw
}

// WithPage adds the page to the get images params
func (o *GetImagesParams) WithPage(page *int64) *GetImagesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get images params
func (o *GetImagesParams) SetPage(page *int64) {
	o.Page = page
}

// WithPeriod adds the period to the get images params
func (o *GetImagesParams) WithPeriod(period *string) *GetImagesParams {
	o.SetPeriod(period)
	return o
}

// SetPeriod adds the period to the get images params
func (o *GetImagesParams) SetPeriod(period *string) {
	o.Period = period
}

// WithPostID adds the postID to the get images params
func (o *GetImagesParams) WithPostID(postID *int64) *GetImagesParams {
	o.SetPostID(postID)
	return o
}

// SetPostID adds the postId to the get images params
func (o *GetImagesParams) SetPostID(postID *int64) {
	o.PostID = postID
}

// WithSort adds the sort to the get images params
func (o *GetImagesParams) WithSort(sort *string) *GetImagesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get images params
func (o *GetImagesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithUsername adds the username to the get images params
func (o *GetImagesParams) WithUsername(username *string) *GetImagesParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the get images params
func (o *GetImagesParams) SetUsername(username *string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *GetImagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.ModelID != nil {

		// query param modelId
		var qrModelID int64

		if o.ModelID != nil {
			qrModelID = *o.ModelID
		}
		qModelID := swag.FormatInt64(qrModelID)
		if qModelID != "" {

			if err := r.SetQueryParam("modelId", qModelID); err != nil {
				return err
			}
		}
	}

	if o.ModelVersionID != nil {

		// query param modelVersionId
		var qrModelVersionID int64

		if o.ModelVersionID != nil {
			qrModelVersionID = *o.ModelVersionID
		}
		qModelVersionID := swag.FormatInt64(qrModelVersionID)
		if qModelVersionID != "" {

			if err := r.SetQueryParam("modelVersionId", qModelVersionID); err != nil {
				return err
			}
		}
	}

	if o.Nsfw != nil {

		// query param nsfw
		var qrNsfw bool

		if o.Nsfw != nil {
			qrNsfw = *o.Nsfw
		}
		qNsfw := swag.FormatBool(qrNsfw)
		if qNsfw != "" {

			if err := r.SetQueryParam("nsfw", qNsfw); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Period != nil {

		// query param period
		var qrPeriod string

		if o.Period != nil {
			qrPeriod = *o.Period
		}
		qPeriod := qrPeriod
		if qPeriod != "" {

			if err := r.SetQueryParam("period", qPeriod); err != nil {
				return err
			}
		}
	}

	if o.PostID != nil {

		// query param postId
		var qrPostID int64

		if o.PostID != nil {
			qrPostID = *o.PostID
		}
		qPostID := swag.FormatInt64(qrPostID)
		if qPostID != "" {

			if err := r.SetQueryParam("postId", qPostID); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Username != nil {

		// query param username
		var qrUsername string

		if o.Username != nil {
			qrUsername = *o.Username
		}
		qUsername := qrUsername
		if qUsername != "" {

			if err := r.SetQueryParam("username", qUsername); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
