// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetModelsParams creates a new GetModelsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetModelsParams() *GetModelsParams {
	return &GetModelsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetModelsParamsWithTimeout creates a new GetModelsParams object
// with the ability to set a timeout on a request.
func NewGetModelsParamsWithTimeout(timeout time.Duration) *GetModelsParams {
	return &GetModelsParams{
		timeout: timeout,
	}
}

// NewGetModelsParamsWithContext creates a new GetModelsParams object
// with the ability to set a context for a request.
func NewGetModelsParamsWithContext(ctx context.Context) *GetModelsParams {
	return &GetModelsParams{
		Context: ctx,
	}
}

// NewGetModelsParamsWithHTTPClient creates a new GetModelsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetModelsParamsWithHTTPClient(client *http.Client) *GetModelsParams {
	return &GetModelsParams{
		HTTPClient: client,
	}
}

/*
GetModelsParams contains all the parameters to send to the API endpoint

	for the get models operation.

	Typically these are written to a http.Request.
*/
type GetModelsParams struct {

	/* Favorites.

	   Filter to favorites of the authenticated user (this requires an API token or session cookie).
	*/
	Favorites *bool

	/* Hidden.

	   Filter to hidden models of the authenticated user (this requires an API token or session cookie).
	*/
	Hidden *bool

	/* Limit.

	   The number of results to be returned per page. This can be a number between 1 and 200. By default, each page will return 100 results.

	   Format: int64
	   Default: 100
	*/
	Limit *int64

	/* Page.

	   The page from which to start fetching models.

	   Format: int64
	*/
	Page *int64

	/* Period.

	   The time frame in which the models will be sorted.
	*/
	Period *string

	/* PrimaryFileOnly.

	   Only include the primary file for each model (This will use your preferred format options if you use an API token or session cookie).
	*/
	PrimaryFileOnly *bool

	/* Query.

	   Search query to filter models by name.
	*/
	Query *string

	/* Rating.

	   The rating you wish to filter the models with. If none is specified, it will return models with any rating.

	   Format: int64
	*/
	Rating *int64

	/* Sort.

	   The order in which you wish to sort the results.
	*/
	Sort *string

	/* Tag.

	   Search query to filter models by tag.
	*/
	Tag *string

	/* Types.

	   The type of model you want to filter with. If none is specified, it will return all types.
	*/
	Types *string

	/* Username.

	   Search query to filter models by user.
	*/
	Username *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get models params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetModelsParams) WithDefaults() *GetModelsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get models params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetModelsParams) SetDefaults() {
	var (
		limitDefault = int64(100)
	)

	val := GetModelsParams{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get models params
func (o *GetModelsParams) WithTimeout(timeout time.Duration) *GetModelsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get models params
func (o *GetModelsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get models params
func (o *GetModelsParams) WithContext(ctx context.Context) *GetModelsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get models params
func (o *GetModelsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get models params
func (o *GetModelsParams) WithHTTPClient(client *http.Client) *GetModelsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get models params
func (o *GetModelsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFavorites adds the favorites to the get models params
func (o *GetModelsParams) WithFavorites(favorites *bool) *GetModelsParams {
	o.SetFavorites(favorites)
	return o
}

// SetFavorites adds the favorites to the get models params
func (o *GetModelsParams) SetFavorites(favorites *bool) {
	o.Favorites = favorites
}

// WithHidden adds the hidden to the get models params
func (o *GetModelsParams) WithHidden(hidden *bool) *GetModelsParams {
	o.SetHidden(hidden)
	return o
}

// SetHidden adds the hidden to the get models params
func (o *GetModelsParams) SetHidden(hidden *bool) {
	o.Hidden = hidden
}

// WithLimit adds the limit to the get models params
func (o *GetModelsParams) WithLimit(limit *int64) *GetModelsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get models params
func (o *GetModelsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithPage adds the page to the get models params
func (o *GetModelsParams) WithPage(page *int64) *GetModelsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get models params
func (o *GetModelsParams) SetPage(page *int64) {
	o.Page = page
}

// WithPeriod adds the period to the get models params
func (o *GetModelsParams) WithPeriod(period *string) *GetModelsParams {
	o.SetPeriod(period)
	return o
}

// SetPeriod adds the period to the get models params
func (o *GetModelsParams) SetPeriod(period *string) {
	o.Period = period
}

// WithPrimaryFileOnly adds the primaryFileOnly to the get models params
func (o *GetModelsParams) WithPrimaryFileOnly(primaryFileOnly *bool) *GetModelsParams {
	o.SetPrimaryFileOnly(primaryFileOnly)
	return o
}

// SetPrimaryFileOnly adds the primaryFileOnly to the get models params
func (o *GetModelsParams) SetPrimaryFileOnly(primaryFileOnly *bool) {
	o.PrimaryFileOnly = primaryFileOnly
}

// WithQuery adds the query to the get models params
func (o *GetModelsParams) WithQuery(query *string) *GetModelsParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get models params
func (o *GetModelsParams) SetQuery(query *string) {
	o.Query = query
}

// WithRating adds the rating to the get models params
func (o *GetModelsParams) WithRating(rating *int64) *GetModelsParams {
	o.SetRating(rating)
	return o
}

// SetRating adds the rating to the get models params
func (o *GetModelsParams) SetRating(rating *int64) {
	o.Rating = rating
}

// WithSort adds the sort to the get models params
func (o *GetModelsParams) WithSort(sort *string) *GetModelsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get models params
func (o *GetModelsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithTag adds the tag to the get models params
func (o *GetModelsParams) WithTag(tag *string) *GetModelsParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the get models params
func (o *GetModelsParams) SetTag(tag *string) {
	o.Tag = tag
}

// WithTypes adds the types to the get models params
func (o *GetModelsParams) WithTypes(types *string) *GetModelsParams {
	o.SetTypes(types)
	return o
}

// SetTypes adds the types to the get models params
func (o *GetModelsParams) SetTypes(types *string) {
	o.Types = types
}

// WithUsername adds the username to the get models params
func (o *GetModelsParams) WithUsername(username *string) *GetModelsParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the get models params
func (o *GetModelsParams) SetUsername(username *string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *GetModelsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Favorites != nil {

		// query param favorites
		var qrFavorites bool

		if o.Favorites != nil {
			qrFavorites = *o.Favorites
		}
		qFavorites := swag.FormatBool(qrFavorites)
		if qFavorites != "" {

			if err := r.SetQueryParam("favorites", qFavorites); err != nil {
				return err
			}
		}
	}

	if o.Hidden != nil {

		// query param hidden
		var qrHidden bool

		if o.Hidden != nil {
			qrHidden = *o.Hidden
		}
		qHidden := swag.FormatBool(qrHidden)
		if qHidden != "" {

			if err := r.SetQueryParam("hidden", qHidden); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Period != nil {

		// query param period
		var qrPeriod string

		if o.Period != nil {
			qrPeriod = *o.Period
		}
		qPeriod := qrPeriod
		if qPeriod != "" {

			if err := r.SetQueryParam("period", qPeriod); err != nil {
				return err
			}
		}
	}

	if o.PrimaryFileOnly != nil {

		// query param primaryFileOnly
		var qrPrimaryFileOnly bool

		if o.PrimaryFileOnly != nil {
			qrPrimaryFileOnly = *o.PrimaryFileOnly
		}
		qPrimaryFileOnly := swag.FormatBool(qrPrimaryFileOnly)
		if qPrimaryFileOnly != "" {

			if err := r.SetQueryParam("primaryFileOnly", qPrimaryFileOnly); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.Rating != nil {

		// query param rating
		var qrRating int64

		if o.Rating != nil {
			qrRating = *o.Rating
		}
		qRating := swag.FormatInt64(qrRating)
		if qRating != "" {

			if err := r.SetQueryParam("rating", qRating); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Tag != nil {

		// query param tag
		var qrTag string

		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {

			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}
	}

	if o.Types != nil {

		// query param types
		var qrTypes string

		if o.Types != nil {
			qrTypes = *o.Types
		}
		qTypes := qrTypes
		if qTypes != "" {

			if err := r.SetQueryParam("types", qTypes); err != nil {
				return err
			}
		}
	}

	if o.Username != nil {

		// query param username
		var qrUsername string

		if o.Username != nil {
			qrUsername = *o.Username
		}
		qUsername := qrUsername
		if qUsername != "" {

			if err := r.SetQueryParam("username", qUsername); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
